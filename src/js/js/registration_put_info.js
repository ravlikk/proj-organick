import axios from 'axios';

const log = document.querySelector('.header__registration');
const emailInput = document.getElementById('email');
const passwordInput = document.getElementById('password');
const submitBtn = document.getElementById('submit');

window.addEventListener('DOMContentLoaded', () => {
  const isAuthenticated = localStorage.getItem('isAuthenticated');
  if (isAuthenticated === 'true') {
    log.style.display = 'none'; 
    console.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π, –∫–Ω–æ–ø–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞');
  }
});

function validateForm() {
  const email = emailInput.value.trim();
  const password = passwordInput.value.trim();

  const isEmailValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  const isPasswordValid = password.length >= 6;

  submitBtn.disabled = !(isEmailValid && isPasswordValid);
}

emailInput.addEventListener('input', validateForm);
passwordInput.addEventListener('input', validateForm);

// üì¶ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async function registerUser(email, password) {
  try {
    const res = await axios({
      method: 'POST',
      url: 'https://test-nest-api-iqy9.onrender.com/api/users', 
      data: { email, password },
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });

    const data = res.data;
    console.log('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞:', data);

    if (data.token) {
      localStorage.setItem('token', data.token);
      localStorage.setItem('isAuthenticated', 'true');
      submitBtn.style.display = 'none';
    } else {
      console.warn('–¢–æ–∫–µ–Ω –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞');
    }

    return data;
  } catch (err) {
    if (err.response) {
      console.error('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–µ—É—Å–ø—ñ—à–Ω–∞:', err.response.data.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
      throw new Error(err.response.data.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞');
    } else {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É:', err.message);
      throw err;
    }
  }
}

// üîò –û–±—Ä–æ–±–∫–∞ –∫–ª—ñ–∫—É –Ω–∞ –∫–Ω–æ–ø–∫—É
submitBtn.addEventListener('click', async (e) => {
  e.preventDefault();

  const email = emailInput.value.trim();
  const password = passwordInput.value.trim();

  if (!email || !password) {
    console.warn('Email –∞–±–æ –ø–∞—Ä–æ–ª—å –Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω—ñ');
    return;
  }

  try {
    const result = await registerUser(email, password);
    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', result);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó:', error.message);
  }
});

validateForm();
